plugins {
    id 'java'
    id 'java-library'
    id 'idea'
    id 'groovy'
    id 'eclipse'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example.tasks.saver'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()

}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework:spring-beans'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.3.0'

    implementation 'org.hibernate:hibernate-core:6.2.6.Final'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //gson
    implementation("com.google.code.gson:gson:2.13.1")
    implementation 'org.slf4j:slf4j-api:2.0.7'

    implementation 'org.webjars:bootstrap:5.3.3'
    implementation 'org.webjars:jquery:3.6.0'

    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
bootJar {
    archiveFileName = 'taskSaver.jar'
    mainClass = 'com.example.tasks.saver.TasksSaverApplication'
}
task fatJar(type: Jar, group: 'build') {
/*tasks.register('fatJar', Jar) {*/
    manifest {
        attributes "Main-Class": "com.example.tasks.saver.TasksSaverApplication"
        /*attributes 'Class-Path': configurations.compile.files.collect { "lib/$it.name" }.join(' ')*/
    }

    from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn configurations.runtimeClasspath
    from {
        //configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    archiveFileName = 'taskSaver-all.jar'
    with jar
}
springBoot {
    mainClass = 'com.example.tasks.saver.TasksSaverApplication'
}

